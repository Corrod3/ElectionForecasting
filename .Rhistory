rolling.average.dates$method = rep("sz.rolling.av", nrow(rolling.average.dates))
Polls <- rbind(Polls, rolling.average.dates)
Polls$pct <- round(as.numeric(Polls$pct), 1)
Polls$datum <- lubridate::month(Polls$datum, label = TRUE)
PollsTable <- Polls %>% select(-shares) %>% spread(partei, pct)
a <- PollsTable %>%
filter(is.na(Other)) %>%
select(-method, -datum, -Other)
PollsTable[is.na(PollsTable)] <- 100-rowSums(a)
# rmse computation
partynames <- names(PollsTable[,-c(1,2)])
PollsTable$rmse <- rep(0, nrow(PollsTable))
#df <- PollsTable
rmse.func <- function(df) {
for (j in unique(as.character(df$datum))) {
for (i in unique(df$method)) {
vec.f <- unlist(df[df$method == i & df$datum == j, which(names(df) %in% partynames)])
vec.sz <- unlist(df[df$method == "sz.rolling.av" & df$datum == j, which(names(df) %in% partynames)])
df$rmse[df$method == i & df$datum == j] <- rmse(vec.sz, vec.f)
}}
}
PollsTable <- rmse.func(PollsTable)
df_rolling_average_and_error <-
read.csv("Benchmarking/data/data-rolling-average-and-error.csv",
stringsAsFactors = F,
sep=",",
encoding ="utf-8")
load("Processed/polls.RData")
# format forecasts
Polls %<>% filter(!str_detect(method ,".+count")) %>%
gather("partei", "shares", -method, -date) %>%
dplyr::rename(datum = date, pct = shares)
Polls$shares <- as.numeric(Polls$pct)/100
# set formats
df_rolling_average_and_error$partei %<>%
str_replace("CDU/CSU", "Union") %>%
str_replace("Grüne", "Gruene")
df_rolling_average_and_error$datum <- as.Date(df_rolling_average_and_error$datum, "%Y-%m-%d")
df_rolling_average_and_error$ci_lower <- as.numeric(df_rolling_average_and_error$ci_lower)
df_rolling_average_and_error$ci_higher <- as.numeric(df_rolling_average_and_error$ci_higher)
df_rolling_average_and_error_party <- unique(df_rolling_average_and_error$partei)
latest_values <- arrange(df_rolling_average_and_error, desc(datum)) %>% filter(datum == datum[1])
hidden_chars <- c("\U200C","\u200D","\u200E","\u200F","\U200C","\u200D")
latest_values <- arrange(latest_values, desc(rolling_average))
latest_values <- cbind(latest_values, hidden_chars)
startDatum <- "2015-06-01"
df_rolling_average_and_error <- filter(df_rolling_average_and_error, datum > startDatum)
# andere Namen für die Linien als das Standardlabel
get_label_value <- function (partei){
index = match(partei, latest_values$partei)
label = paste0(round(latest_values$ci_lower[index]*100, digits = 0), "-", round(latest_values$ci_higher[index]*100, digits = 0), "%",latest_values$hidden_chars[index] )
label = as.character(label)
}
### Table #####################################################################
rolling.average.dates <- df_rolling_average_and_error %>%
filter(datum %in% ymd(c("2016-12-10", "2017-3-18", "2017-3-22"))) %>%
mutate(year = year(datum),
shares = rolling_average,
pct = shares*100) %>%
group_by(year, partei) %>%
summarize_all(mean) %>%
ungroup() %>%
select(-year, -sz_err, -rolling_average, -matches("ci_"))
rolling.average.dates$method = rep("sz.rolling.av", nrow(rolling.average.dates))
Polls <- rbind(Polls, rolling.average.dates)
Polls$pct <- round(as.numeric(Polls$pct), 1)
Polls$datum <- lubridate::month(Polls$datum, label = TRUE)
PollsTable <- Polls %>% select(-shares) %>% spread(partei, pct)
a <- PollsTable %>%
filter(is.na(Other)) %>%
select(-method, -datum, -Other)
PollsTable[is.na(PollsTable)] <- 100-rowSums(a)
# rmse computation
partynames <- names(PollsTable[,-c(1,2)])
PollsTable$rmse <- rep(0, nrow(PollsTable))
#df <- PollsTable
for (j in unique(as.character(df$datum))) {
for (i in unique(df$method)) {
vec.f <- unlist(df[df$method == i & df$datum == j, which(names(df) %in% partynames)])
vec.sz <- unlist(df[df$method == "sz.rolling.av" & df$datum == j, which(names(df) %in% partynames)])
df$rmse[df$method == i & df$datum == j] <- rmse(vec.sz, vec.f)
}}
df_rolling_average_and_error <-
read.csv("Benchmarking/data/data-rolling-average-and-error.csv",
stringsAsFactors = F,
sep=",",
encoding ="utf-8")
load("Processed/polls.RData")
# format forecasts
Polls %<>% filter(!str_detect(method ,".+count")) %>%
gather("partei", "shares", -method, -date) %>%
dplyr::rename(datum = date, pct = shares)
Polls$shares <- as.numeric(Polls$pct)/100
# set formats
df_rolling_average_and_error$partei %<>%
str_replace("CDU/CSU", "Union") %>%
str_replace("Grüne", "Gruene")
df_rolling_average_and_error$datum <- as.Date(df_rolling_average_and_error$datum, "%Y-%m-%d")
df_rolling_average_and_error$ci_lower <- as.numeric(df_rolling_average_and_error$ci_lower)
df_rolling_average_and_error$ci_higher <- as.numeric(df_rolling_average_and_error$ci_higher)
df_rolling_average_and_error_party <- unique(df_rolling_average_and_error$partei)
latest_values <- arrange(df_rolling_average_and_error, desc(datum)) %>% filter(datum == datum[1])
hidden_chars <- c("\U200C","\u200D","\u200E","\u200F","\U200C","\u200D")
latest_values <- arrange(latest_values, desc(rolling_average))
latest_values <- cbind(latest_values, hidden_chars)
startDatum <- "2015-06-01"
df_rolling_average_and_error <- filter(df_rolling_average_and_error, datum > startDatum)
# andere Namen für die Linien als das Standardlabel
get_label_value <- function (partei){
index = match(partei, latest_values$partei)
label = paste0(round(latest_values$ci_lower[index]*100, digits = 0), "-", round(latest_values$ci_higher[index]*100, digits = 0), "%",latest_values$hidden_chars[index] )
label = as.character(label)
}
### Table #####################################################################
rolling.average.dates <- df_rolling_average_and_error %>%
filter(datum %in% ymd(c("2016-12-10", "2017-3-18", "2017-3-22"))) %>%
mutate(year = year(datum),
shares = rolling_average,
pct = shares*100) %>%
group_by(year, partei) %>%
summarize_all(mean) %>%
ungroup() %>%
select(-year, -sz_err, -rolling_average, -matches("ci_"))
rolling.average.dates$method = rep("sz.rolling.av", nrow(rolling.average.dates))
Polls <- rbind(Polls, rolling.average.dates)
Polls$pct <- round(as.numeric(Polls$pct), 1)
Polls$datum <- lubridate::month(Polls$datum, label = TRUE)
PollsTable <- Polls %>% select(-shares) %>% spread(partei, pct)
a <- PollsTable %>%
filter(is.na(Other)) %>%
select(-method, -datum, -Other)
PollsTable[is.na(PollsTable)] <- 100-rowSums(a)
# rmse computation
partynames <- names(PollsTable[,-c(1,2)])
PollsTable$rmse <- rep(0, nrow(PollsTable))
#df <- PollsTable
df_rolling_average_and_error <-
read.csv("Benchmarking/data/data-rolling-average-and-error.csv",
stringsAsFactors = F,
sep=",",
encoding ="utf-8")
load("Processed/polls.RData")
# format forecasts
Polls %<>% filter(!str_detect(method ,".+count")) %>%
gather("partei", "shares", -method, -date) %>%
dplyr::rename(datum = date, pct = shares)
Polls$shares <- as.numeric(Polls$pct)/100
# set formats
df_rolling_average_and_error$partei %<>%
str_replace("CDU/CSU", "Union") %>%
str_replace("Grüne", "Gruene")
df_rolling_average_and_error$datum <- as.Date(df_rolling_average_and_error$datum, "%Y-%m-%d")
df_rolling_average_and_error$ci_lower <- as.numeric(df_rolling_average_and_error$ci_lower)
df_rolling_average_and_error$ci_higher <- as.numeric(df_rolling_average_and_error$ci_higher)
df_rolling_average_and_error_party <- unique(df_rolling_average_and_error$partei)
latest_values <- arrange(df_rolling_average_and_error, desc(datum)) %>% filter(datum == datum[1])
hidden_chars <- c("\U200C","\u200D","\u200E","\u200F","\U200C","\u200D")
latest_values <- arrange(latest_values, desc(rolling_average))
latest_values <- cbind(latest_values, hidden_chars)
startDatum <- "2015-06-01"
df_rolling_average_and_error <- filter(df_rolling_average_and_error, datum > startDatum)
# andere Namen für die Linien als das Standardlabel
get_label_value <- function (partei){
index = match(partei, latest_values$partei)
label = paste0(round(latest_values$ci_lower[index]*100, digits = 0), "-", round(latest_values$ci_higher[index]*100, digits = 0), "%",latest_values$hidden_chars[index] )
label = as.character(label)
}
### Table #####################################################################
rolling.average.dates <- df_rolling_average_and_error %>%
filter(datum %in% ymd(c("2016-12-10", "2017-3-18", "2017-3-22"))) %>%
mutate(year = year(datum),
shares = rolling_average,
pct = shares*100) %>%
group_by(year, partei) %>%
summarize_all(mean) %>%
ungroup() %>%
select(-year, -sz_err, -rolling_average, -matches("ci_"))
rolling.average.dates$method = rep("sz.rolling.av", nrow(rolling.average.dates))
Polls <- rbind(Polls, rolling.average.dates)
Polls$pct <- round(as.numeric(Polls$pct), 1)
Polls$datum <- lubridate::month(Polls$datum, label = TRUE)
PollsTable <- Polls %>% select(-shares) %>% spread(partei, pct)
a <- PollsTable %>%
filter(is.na(Other)) %>%
select(-method, -datum, -Other)
PollsTable[is.na(PollsTable)] <- 100-rowSums(a)
# rmse computation
partynames <- names(PollsTable[,-c(1,2)])
PollsTable$rmse <- rep(0, nrow(PollsTable))
#df <- PollsTable
df_rolling_average_and_error <-
read.csv("Benchmarking/data/data-rolling-average-and-error.csv",
stringsAsFactors = F,
sep=",",
encoding ="utf-8")
load("Processed/polls.RData")
# format forecasts
Polls %<>% filter(!str_detect(method ,".+count")) %>%
gather("partei", "shares", -method, -date) %>%
dplyr::rename(datum = date, pct = shares)
Polls$shares <- as.numeric(Polls$pct)/100
# set formats
df_rolling_average_and_error$partei %<>%
str_replace("CDU/CSU", "Union") %>%
str_replace("Grüne", "Gruene")
df_rolling_average_and_error$datum <- as.Date(df_rolling_average_and_error$datum, "%Y-%m-%d")
df_rolling_average_and_error$ci_lower <- as.numeric(df_rolling_average_and_error$ci_lower)
df_rolling_average_and_error$ci_higher <- as.numeric(df_rolling_average_and_error$ci_higher)
df_rolling_average_and_error_party <- unique(df_rolling_average_and_error$partei)
latest_values <- arrange(df_rolling_average_and_error, desc(datum)) %>% filter(datum == datum[1])
hidden_chars <- c("\U200C","\u200D","\u200E","\u200F","\U200C","\u200D")
latest_values <- arrange(latest_values, desc(rolling_average))
latest_values <- cbind(latest_values, hidden_chars)
startDatum <- "2015-06-01"
df_rolling_average_and_error <- filter(df_rolling_average_and_error, datum > startDatum)
# andere Namen für die Linien als das Standardlabel
get_label_value <- function (partei){
index = match(partei, latest_values$partei)
label = paste0(round(latest_values$ci_lower[index]*100, digits = 0), "-", round(latest_values$ci_higher[index]*100, digits = 0), "%",latest_values$hidden_chars[index] )
label = as.character(label)
}
### Table #####################################################################
rolling.average.dates <- df_rolling_average_and_error %>%
filter(datum %in% ymd(c("2016-12-10", "2017-3-18", "2017-3-22"))) %>%
mutate(year = year(datum),
shares = rolling_average,
pct = shares*100) %>%
group_by(year, partei) %>%
summarize_all(mean) %>%
ungroup() %>%
select(-year, -sz_err, -rolling_average, -matches("ci_"))
rolling.average.dates$method = rep("sz.rolling.av", nrow(rolling.average.dates))
Polls <- rbind(Polls, rolling.average.dates)
Polls$pct <- round(as.numeric(Polls$pct), 1)
Polls$datum <- lubridate::month(Polls$datum, label = TRUE)
PollsTable <- Polls %>% select(-shares) %>% spread(partei, pct)
a <- PollsTable %>%
filter(is.na(Other)) %>%
select(-method, -datum, -Other)
PollsTable[is.na(PollsTable)] <- 100-rowSums(a)
# rmse computation
partynames <- names(PollsTable[,-c(1,2)])
PollsTable$rmse <- rep(0, nrow(PollsTable))
#df <- PollsTable
rmse.func <- function(df) {
for (j in unique(as.character(df$datum))) {
for (i in unique(df$method)) {
vec.f <- unlist(df[df$method == i & df$datum == j, which(names(df) %in% partynames)])
vec.sz <- unlist(df[df$method == "sz.rolling.av" & df$datum == j, which(names(df) %in% partynames)])
df$rmse[df$method == i & df$datum == j] <- rmse(vec.sz, vec.f)
}}
return(df)
}
PollsTable <- rmse.func(PollsTable)
source('C:/Users/Moritz/Desktop/ElectionForecasting/Benchmarking/tasks/chart-longterm-polls.R', encoding = 'UTF-8')
source('C:/Users/Moritz/Desktop/ElectionForecasting/Benchmarking/tasks/chart-longterm-polls.R', encoding = 'UTF-8')
source('C:/Users/Moritz/Desktop/ElectionForecasting/Benchmarking/tasks/chart-longterm-polls.R', encoding = 'UTF-8')
source('C:/Users/Moritz/Desktop/ElectionForecasting/Benchmarking/tasks/chart-longterm-polls.R', encoding = 'UTF-8')
df_rolling_average_and_error <-
read.csv("Benchmarking/data/data-rolling-average-and-error.csv",
stringsAsFactors = F,
sep=",",
encoding ="utf-8")
load("Processed/polls.RData")
# format forecasts
Polls %<>% filter(!str_detect(method ,".+count")) %>%
gather("partei", "shares", -method, -date) %>%
dplyr::rename(datum = date, pct = shares)
Polls$shares <- as.numeric(Polls$pct)/100
# set formats
df_rolling_average_and_error$partei %<>%
str_replace("CDU/CSU", "Union") %>%
str_replace("Grüne", "Gruene")
df_rolling_average_and_error$datum <- as.Date(df_rolling_average_and_error$datum, "%Y-%m-%d")
df_rolling_average_and_error$ci_lower <- as.numeric(df_rolling_average_and_error$ci_lower)
df_rolling_average_and_error$ci_higher <- as.numeric(df_rolling_average_and_error$ci_higher)
df_rolling_average_and_error_party <- unique(df_rolling_average_and_error$partei)
latest_values <- arrange(df_rolling_average_and_error, desc(datum)) %>% filter(datum == datum[1])
hidden_chars <- c("\U200C","\u200D","\u200E","\u200F","\U200C","\u200D")
latest_values <- arrange(latest_values, desc(rolling_average))
latest_values <- cbind(latest_values, hidden_chars)
startDatum <- "2015-06-01"
df_rolling_average_and_error <- filter(df_rolling_average_and_error, datum > startDatum)
# andere Namen für die Linien als das Standardlabel
get_label_value <- function (partei){
index = match(partei, latest_values$partei)
label = paste0(round(latest_values$ci_lower[index]*100, digits = 0), "-", round(latest_values$ci_higher[index]*100, digits = 0), "%",latest_values$hidden_chars[index] )
label = as.character(label)
}
### Table #####################################################################
rolling.average.dates <- df_rolling_average_and_error %>%
filter(datum %in% ymd(c("2016-12-10", "2017-3-18", "2017-3-22"))) %>%
mutate(year = year(datum),
shares = rolling_average,
pct = shares*100) %>%
group_by(year, partei) %>%
summarize_all(mean) %>%
ungroup() %>%
select(-year, -sz_err, -rolling_average, -matches("ci_"))
rolling.average.dates$method = rep("sz.rolling.av", nrow(rolling.average.dates))
Polls <- rbind(Polls, rolling.average.dates)
Polls$pct <- round(as.numeric(Polls$pct), 1)
Polls$datum <- lubridate::month(Polls$datum, label = TRUE)
PollsTable <- Polls %>% select(-shares) %>% spread(partei, pct)
a <- PollsTable %>%
filter(is.na(Other)) %>%
select(-method, -datum, -Other)
PollsTable[is.na(PollsTable)] <- 100-rowSums(a)
# rmse computation
partynames <- names(PollsTable[,-c(1,2)])
PollsTable$rmse <- rep(0, nrow(PollsTable))
#df <- PollsTable
rmse.func <- function(df) {
for (j in unique(as.character(df$datum))) {
for (i in unique(df$method)) {
vec.f <- unlist(df[df$method == i & df$datum == j, which(names(df) %in% partynames)])
vec.sz <- unlist(df[df$method == "sz.rolling.av" & df$datum == j, which(names(df) %in% partynames)])
df$rmse[df$method == i & df$datum == j] <- rmse(vec.sz, vec.f)
}}
return(df)
}
PollsTable <- rmse.func(PollsTable)
source('C:/Users/Moritz/Desktop/ElectionForecasting/Benchmarking/tasks/chart-longterm-polls.R', encoding = 'UTF-8')
rm(list = ls())
source('C:/Users/Moritz/Desktop/ElectionForecasting/Benchmarking/tasks/chart-longterm-polls.R', encoding = 'UTF-8')
df_rolling_average_and_error <-
read.csv("Benchmarking/data/data-rolling-average-and-error.csv",
stringsAsFactors = F,
sep=",",
encoding ="utf-8")
load("Processed/polls.RData")
# format forecasts
Polls %<>% filter(!str_detect(method ,".+count")) %>%
gather("partei", "shares", -method, -date) %>%
dplyr::rename(datum = date, pct = shares)
Polls$shares <- as.numeric(Polls$pct)/100
# set formats
df_rolling_average_and_error$partei %<>%
str_replace("CDU/CSU", "Union") %>%
str_replace("Grüne", "Gruene")
df_rolling_average_and_error$datum <- as.Date(df_rolling_average_and_error$datum, "%Y-%m-%d")
df_rolling_average_and_error$ci_lower <- as.numeric(df_rolling_average_and_error$ci_lower)
df_rolling_average_and_error$ci_higher <- as.numeric(df_rolling_average_and_error$ci_higher)
df_rolling_average_and_error_party <- unique(df_rolling_average_and_error$partei)
latest_values <- arrange(df_rolling_average_and_error, desc(datum)) %>% filter(datum == datum[1])
hidden_chars <- c("\U200C","\u200D","\u200E","\u200F","\U200C","\u200D")
latest_values <- arrange(latest_values, desc(rolling_average))
latest_values <- cbind(latest_values, hidden_chars)
startDatum <- "2015-06-01"
df_rolling_average_and_error <- filter(df_rolling_average_and_error, datum > startDatum)
# andere Namen für die Linien als das Standardlabel
get_label_value <- function (partei){
index = match(partei, latest_values$partei)
label = paste0(round(latest_values$ci_lower[index]*100, digits = 0), "-", round(latest_values$ci_higher[index]*100, digits = 0), "%",latest_values$hidden_chars[index] )
label = as.character(label)
}
### Table #####################################################################
rolling.average.dates <- df_rolling_average_and_error %>%
filter(datum %in% ymd(c("2016-12-10", "2017-3-18", "2017-3-22"))) %>%
mutate(year = year(datum),
shares = rolling_average,
pct = shares*100) %>%
group_by(year, partei) %>%
summarize_all(mean) %>%
ungroup() %>%
select(-year, -sz_err, -rolling_average, -matches("ci_"))
rolling.average.dates$method = rep("sz.rolling.av", nrow(rolling.average.dates))
Polls <- rbind(Polls, rolling.average.dates)
Polls$pct <- round(as.numeric(Polls$pct), 1)
Polls$datum <- lubridate::month(Polls$datum, label = TRUE)
PollsTable <- Polls %>% select(-shares) %>% spread(partei, pct)
a <- PollsTable %>%
filter(is.na(Other)) %>%
select(-method, -datum, -Other)
PollsTable[is.na(PollsTable)] <- 100-rowSums(a)
# rmse computation
partynames <- names(PollsTable[,-c(1,2)])
PollsTable$rmse <- rep(0, nrow(PollsTable))
#df <- PollsTable
rmse.func <- function(df) {
for (j in unique(as.character(df$datum))) {
for (i in unique(df$method)) {
vec.f <- unlist(df[df$method == i & df$datum == j, which(names(df) %in% partynames)])
vec.sz <- unlist(df[df$method == "sz.rolling.av" & df$datum == j, which(names(df) %in% partynames)])
df$rmse[df$method == i & df$datum == j] <- rmse(vec.sz, vec.f)
}}
return(df)
}
PollsTable <- rmse.func(PollsTable)
source('C:/Users/Moritz/Desktop/ElectionForecasting/Benchmarking/tasks/chart-longterm-polls.R', encoding = 'UTF-8')
df_rolling_average_and_error <-
read.csv("Benchmarking/data/data-rolling-average-and-error.csv",
stringsAsFactors = F,
sep=",",
encoding ="utf-8")
load("Processed/polls.RData")
# format forecasts
Polls %<>% filter(!str_detect(method ,".+count")) %>%
gather("partei", "shares", -method, -date) %>%
dplyr::rename(datum = date, pct = shares)
Polls$shares <- as.numeric(Polls$pct)/100
# set formats
df_rolling_average_and_error$partei %<>%
str_replace("CDU/CSU", "Union") %>%
str_replace("Grüne", "Gruene")
df_rolling_average_and_error$datum <- as.Date(df_rolling_average_and_error$datum, "%Y-%m-%d")
df_rolling_average_and_error$ci_lower <- as.numeric(df_rolling_average_and_error$ci_lower)
df_rolling_average_and_error$ci_higher <- as.numeric(df_rolling_average_and_error$ci_higher)
df_rolling_average_and_error_party <- unique(df_rolling_average_and_error$partei)
latest_values <- arrange(df_rolling_average_and_error, desc(datum)) %>% filter(datum == datum[1])
hidden_chars <- c("\U200C","\u200D","\u200E","\u200F","\U200C","\u200D")
latest_values <- arrange(latest_values, desc(rolling_average))
latest_values <- cbind(latest_values, hidden_chars)
startDatum <- "2015-06-01"
df_rolling_average_and_error <- filter(df_rolling_average_and_error, datum > startDatum)
# andere Namen für die Linien als das Standardlabel
get_label_value <- function (partei){
index = match(partei, latest_values$partei)
label = paste0(round(latest_values$ci_lower[index]*100, digits = 0), "-", round(latest_values$ci_higher[index]*100, digits = 0), "%",latest_values$hidden_chars[index] )
label = as.character(label)
}
### Table #####################################################################
rolling.average.dates <- df_rolling_average_and_error %>%
filter(datum %in% ymd(c("2016-12-10", "2017-3-18", "2017-3-22"))) %>%
mutate(year = year(datum),
shares = rolling_average,
pct = shares*100) %>%
group_by(year, partei) %>%
summarize_all(mean) %>%
ungroup() %>%
select(-year, -sz_err, -rolling_average, -matches("ci_"))
rolling.average.dates$method = rep("sz.rolling.av", nrow(rolling.average.dates))
Polls <- rbind(Polls, rolling.average.dates)
Polls$pct <- round(as.numeric(Polls$pct), 1)
Polls$datum <- lubridate::month(Polls$datum, label = TRUE)
PollsTable <- Polls %>% select(-shares) %>% spread(partei, pct)
a <- PollsTable %>%
filter(is.na(Other)) %>%
select(-method, -datum, -Other)
PollsTable[is.na(PollsTable)] <- 100-rowSums(a)
# rmse computation
partynames <- names(PollsTable[,-c(1,2)])
PollsTable$rmse <- rep(0, nrow(PollsTable))
#df <- PollsTable
rmse.func <- function(df) {
for (j in unique(as.character(df$datum))) {
for (i in unique(df$method)) {
vec.f <- unlist(df[df$method == i & df$datum == j, which(names(df) %in% partynames)])
vec.sz <- unlist(df[df$method == "sz.rolling.av" & df$datum == j, which(names(df) %in% partynames)])
df$rmse[df$method == i & df$datum == j] <- rmse(vec.sz, vec.f)
}}
return(df)
}
PollsTable <- rmse.func(PollsTable)
df_rolling_average_and_error <-
read.csv("Benchmarking/data/data-rolling-average-and-error.csv",
stringsAsFactors = F,
sep=",",
encoding ="utf-8")
load("Processed/polls.RData")
Polls %<>% filter(!str_detect(method ,".+count")) %>%
gather("partei", "shares", -method, -date) %>%
dplyr::rename(datum = date, pct = shares)
Polls$shares <- as.numeric(Polls$pct)/100
df_rolling_average_and_error$partei %<>%
str_replace("CDU/CSU", "Union") %>%
str_replace("Grüne", "Gruene")
df_rolling_average_and_error$datum <- as.Date(df_rolling_average_and_error$datum, "%Y-%m-%d")
df_rolling_average_and_error$ci_lower <- as.numeric(df_rolling_average_and_error$ci_lower)
df_rolling_average_and_error$ci_higher <- as.numeric(df_rolling_average_and_error$ci_higher)
df_rolling_average_and_error_party <- unique(df_rolling_average_and_error$partei)
latest_values <- arrange(df_rolling_average_and_error, desc(datum)) %>% filter(datum == datum[1])
hidden_chars <- c("\U200C","\u200D","\u200E","\u200F","\U200C","\u200D")
latest_values <- arrange(latest_values, desc(rolling_average))
latest_values <- cbind(latest_values, hidden_chars)
startDatum <- "2015-06-01"
df_rolling_average_and_error <- filter(df_rolling_average_and_error, datum > startDatum)
get_label_value <- function (partei){
index = match(partei, latest_values$partei)
label = paste0(round(latest_values$ci_lower[index]*100, digits = 0), "-", round(latest_values$ci_higher[index]*100, digits = 0), "%",latest_values$hidden_chars[index] )
label = as.character(label)
}
rolling.average.dates <- df_rolling_average_and_error %>%
filter(datum %in% ymd(c("2016-12-10", "2017-3-18", "2017-3-22"))) %>%
mutate(year = year(datum),
shares = rolling_average,
pct = shares*100) %>%
group_by(year, partei) %>%
summarize_all(mean) %>%
ungroup() %>%
select(-year, -sz_err, -rolling_average, -matches("ci_"))
rolling.average.dates$method = rep("sz.rolling.av", nrow(rolling.average.dates))
Polls <- rbind(Polls, rolling.average.dates)
Polls$pct <- round(as.numeric(Polls$pct), 1)
Polls$datum <- lubridate::month(Polls$datum, label = TRUE)
PollsTable <- Polls %>% select(-shares) %>% spread(partei, pct)
a <- PollsTable %>%
filter(is.na(Other)) %>%
select(-method, -datum, -Other)
PollsTable[is.na(PollsTable)] <- 100-rowSums(a)
partynames <- names(PollsTable[,-c(1,2)])
PollsTable$rmse <- rep(0, nrow(PollsTable))
rmse.func <- function(df) {
for (j in unique(as.character(df$datum))) {
for (i in unique(df$method)) {
vec.f <- unlist(df[df$method == i & df$datum == j, which(names(df) %in% partynames)])
vec.sz <- unlist(df[df$method == "sz.rolling.av" & df$datum == j, which(names(df) %in% partynames)])
df$rmse[df$method == i & df$datum == j] <- rmse(vec.sz, vec.f)
}}
return(df)
}
PollsTable <- rmse.func(PollsTable)
